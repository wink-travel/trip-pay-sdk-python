# coding: utf-8

"""
    Wink Payment API

    A programmatic way to create bookings, receive reactive and disburse funds globally.  ## APIs Not every integrator needs every APIs. For that reason, we have separated APIs into context.  - [Affiliate](/affiliate): All APIs related to selling travel inventory as an affiliate. - [Analytics](/analytics): All APIs related to tracking metrics across a wide variety of data source segments including, more entertaining, leaderboard metrics. - [Booking](/booking): All APIs related to creating platform bookings. - [Channel Manager](/channel-manager): All APIs related to channel managers who want to integrate with our platform. - [Extranet](/extranet): All APIs related to managing travel inventory and suppliers. - [Inventory](/inventory): All APIs related to retrieve known travel inventory as it was found using the Lookup API.. - [Lookup](/lookup): All APIs related to locating inventory by region, locale and property flags. - [Reference](/reference): All APIs related to retrieving platform-supported taxonomies. - [TripPay](/reactive): All APIs related to TripPay account management, booking, mapping and integration features.  ## SDKs We are actively working on supporting the most used languages out there. If you don't see your language here, reach out to us with a request to officially add your language. In the meantime, if you want to roll your own SDK, you can do so by downloading the OpenAPI spec and using one of the many available OpenAPI generators available: [https://openapi-generator.tech/docs/generators](https://openapi-generator.tech/docs/generators).  - Java SDK [https://github.com/wink-travel/trip-pay-sdk-java](https://github.com/wink-travel/trip-pay-sdk-java)  # Usage These features are made available to you via a [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer). This API is language agnostic. We will link to SDKs for the most popular programming languages on this page as they become available.  ## Versioning We chose to version our endpoints in a way that we hope affects your integration with us the least. You request the version of our API you wish to work with via the `Wink-Version` header. When it's time for you to upgrade, you only have to change the version number to get access to our updated endpoints.  ## Release history - Follow updates on Github: https://github.com/wink-travel/wink-sdk-java/blob/master/CHANGELOG.md 

    The version of the OpenAPI document: 30.9.11
    Contact: bjorn@wink.travel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from trip_pay_payment.models.acquirer import Acquirer
from trip_pay_payment.models.authenticated_user import AuthenticatedUser
from trip_pay_payment.models.custom_monetary_amount import CustomMonetaryAmount
from trip_pay_payment.models.priced_supplier_contract_item_with_acquirer import PricedSupplierContractItemWithAcquirer
from trip_pay_payment.models.quote import Quote
from typing import Optional, Set
from typing_extensions import Self

class PricedSupplierContractWithAcquirer(BaseModel):
    """
    Details of the booking entries that went in for one particular supplier directly.
    """ # noqa: E501
    federated_organization_identifier: StrictStr = Field(description="The auth realm owner ID", alias="federatedOrganizationIdentifier")
    federated_organization_name: StrictStr = Field(description="The auth realm owner name", alias="federatedOrganizationName")
    user: AuthenticatedUser
    ip_address: StrictStr = Field(description="Caller's IP address", alias="ipAddress")
    trace_id: StrictStr = Field(description="Way to track which booking contracts were made together", alias="traceId")
    source_url: StrictStr = Field(description="Where did the booking occur", alias="sourceUrl")
    identifier: StrictStr = Field(description="Unique identifier used to track the contract. Create a UUID for this purpose.")
    supplier_identifier: StrictStr = Field(description="Supplier identifier", alias="supplierIdentifier")
    supplier_name: StrictStr = Field(description="Supplier name", alias="supplierName")
    display_price_quote: Quote = Field(alias="displayPriceQuote")
    supplier_price_quote: Quote = Field(alias="supplierPriceQuote")
    internal_price_quote: Quote = Field(alias="internalPriceQuote")
    capture_price_quote: Quote = Field(alias="capturePriceQuote")
    item_list: Annotated[List[PricedSupplierContractItemWithAcquirer], Field(min_length=1, max_length=2147483647)] = Field(alias="itemList")
    acquirer: List[Acquirer]
    external_supplier_identifier: StrictStr = Field(description="Track supplier with its external supplier identifier", alias="externalSupplierIdentifier")
    external_supplier_booking_code: StrictStr = Field(description="External booking code generated by the affiliate", alias="externalSupplierBookingCode")
    external_transaction_identifier: StrictStr = Field(description="External transaction identifier populated when agent responsible for acquiring", alias="externalTransactionIdentifier")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Place to add more data related to the booking contract.")
    total_price: Optional[CustomMonetaryAmount] = Field(default=None, alias="totalPrice")
    total_display_price: Optional[CustomMonetaryAmount] = Field(default=None, alias="totalDisplayPrice")
    total_supplier_price: Optional[CustomMonetaryAmount] = Field(default=None, alias="totalSupplierPrice")
    total_internal_price: Optional[CustomMonetaryAmount] = Field(default=None, alias="totalInternalPrice")
    total_capture_price: Optional[CustomMonetaryAmount] = Field(default=None, alias="totalCapturePrice")
    __properties: ClassVar[List[str]] = ["federatedOrganizationIdentifier", "federatedOrganizationName", "user", "ipAddress", "traceId", "sourceUrl", "identifier", "supplierIdentifier", "supplierName", "displayPriceQuote", "supplierPriceQuote", "internalPriceQuote", "capturePriceQuote", "itemList", "acquirer", "externalSupplierIdentifier", "externalSupplierBookingCode", "externalTransactionIdentifier", "metadata", "totalPrice", "totalDisplayPrice", "totalSupplierPrice", "totalInternalPrice", "totalCapturePrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricedSupplierContractWithAcquirer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "item_list",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_price_quote
        if self.display_price_quote:
            _dict['displayPriceQuote'] = self.display_price_quote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of supplier_price_quote
        if self.supplier_price_quote:
            _dict['supplierPriceQuote'] = self.supplier_price_quote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of internal_price_quote
        if self.internal_price_quote:
            _dict['internalPriceQuote'] = self.internal_price_quote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of capture_price_quote
        if self.capture_price_quote:
            _dict['capturePriceQuote'] = self.capture_price_quote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in item_list (list)
        _items = []
        if self.item_list:
            for _item_item_list in self.item_list:
                if _item_item_list:
                    _items.append(_item_item_list.to_dict())
            _dict['itemList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in acquirer (list)
        _items = []
        if self.acquirer:
            for _item_acquirer in self.acquirer:
                if _item_acquirer:
                    _items.append(_item_acquirer.to_dict())
            _dict['acquirer'] = _items
        # override the default output from pydantic by calling `to_dict()` of total_price
        if self.total_price:
            _dict['totalPrice'] = self.total_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_display_price
        if self.total_display_price:
            _dict['totalDisplayPrice'] = self.total_display_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_supplier_price
        if self.total_supplier_price:
            _dict['totalSupplierPrice'] = self.total_supplier_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_internal_price
        if self.total_internal_price:
            _dict['totalInternalPrice'] = self.total_internal_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_capture_price
        if self.total_capture_price:
            _dict['totalCapturePrice'] = self.total_capture_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricedSupplierContractWithAcquirer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "federatedOrganizationIdentifier": obj.get("federatedOrganizationIdentifier"),
            "federatedOrganizationName": obj.get("federatedOrganizationName"),
            "user": AuthenticatedUser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "ipAddress": obj.get("ipAddress"),
            "traceId": obj.get("traceId"),
            "sourceUrl": obj.get("sourceUrl"),
            "identifier": obj.get("identifier"),
            "supplierIdentifier": obj.get("supplierIdentifier"),
            "supplierName": obj.get("supplierName"),
            "displayPriceQuote": Quote.from_dict(obj["displayPriceQuote"]) if obj.get("displayPriceQuote") is not None else None,
            "supplierPriceQuote": Quote.from_dict(obj["supplierPriceQuote"]) if obj.get("supplierPriceQuote") is not None else None,
            "internalPriceQuote": Quote.from_dict(obj["internalPriceQuote"]) if obj.get("internalPriceQuote") is not None else None,
            "capturePriceQuote": Quote.from_dict(obj["capturePriceQuote"]) if obj.get("capturePriceQuote") is not None else None,
            "itemList": [PricedSupplierContractItemWithAcquirer.from_dict(_item) for _item in obj["itemList"]] if obj.get("itemList") is not None else None,
            "acquirer": [Acquirer.from_dict(_item) for _item in obj["acquirer"]] if obj.get("acquirer") is not None else None,
            "externalSupplierIdentifier": obj.get("externalSupplierIdentifier"),
            "externalSupplierBookingCode": obj.get("externalSupplierBookingCode"),
            "externalTransactionIdentifier": obj.get("externalTransactionIdentifier"),
            "metadata": obj.get("metadata"),
            "totalPrice": CustomMonetaryAmount.from_dict(obj["totalPrice"]) if obj.get("totalPrice") is not None else None,
            "totalDisplayPrice": CustomMonetaryAmount.from_dict(obj["totalDisplayPrice"]) if obj.get("totalDisplayPrice") is not None else None,
            "totalSupplierPrice": CustomMonetaryAmount.from_dict(obj["totalSupplierPrice"]) if obj.get("totalSupplierPrice") is not None else None,
            "totalInternalPrice": CustomMonetaryAmount.from_dict(obj["totalInternalPrice"]) if obj.get("totalInternalPrice") is not None else None,
            "totalCapturePrice": CustomMonetaryAmount.from_dict(obj["totalCapturePrice"]) if obj.get("totalCapturePrice") is not None else None
        })
        return _obj


